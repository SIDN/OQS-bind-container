diff --git a/bin/dnssec/dnssec-verify.c b/bin/dnssec/dnssec-verify.c
index e6b8972b02..9930399273 100644
--- a/bin/dnssec/dnssec-verify.c
+++ b/bin/dnssec/dnssec-verify.c
@@ -59,6 +59,10 @@
 #include <dns/zoneverify.h>
 
 #include <dst/dst.h>
+#if OPENSSL_VERSION_NUMBER >= 0x30200000L && OPENSSL_API_LEVEL >= 30200
+#include <openssl/err.h>
+#include <openssl/provider.h>
+#endif
 
 #include "dnssectool.h"
 
@@ -176,6 +180,9 @@ main(int argc, char *argv[]) {
 	dns_rdataclass_t rdclass;
 	char *endp;
 	int ch;
+#if OPENSSL_VERSION_NUMBER >= 0x30200000L && OPENSSL_API_LEVEL >= 30200
+	OSSL_PROVIDER *oqs = NULL, *default_provider = NULL;
+#endif
 
 #define CMDLINE_FLAGS "c:E:hJ:m:o:I:qv:Vxz"
 
@@ -275,6 +282,20 @@ main(int argc, char *argv[]) {
 		}
 	}
 
+#if OPENSSL_VERSION_NUMBER >= 0x30200000L && OPENSSL_API_LEVEL >= 30200
+	oqs = OSSL_PROVIDER_load(NULL, "oqsprovider");
+	if (oqs == NULL) {
+		ERR_clear_error();
+		fatal("Failed to load oqsprovider");
+	}
+	default_provider = OSSL_PROVIDER_load(NULL, "default");
+	if (default_provider == NULL) {
+		OSSL_PROVIDER_unload(oqs);
+		ERR_clear_error();
+		fatal("Failed to load default provider");
+	}
+#endif
+
 	result = dst_lib_init(mctx, engine);
 	if (result != ISC_R_SUCCESS) {
 		fatal("could not initialize dst: %s",
@@ -342,5 +363,14 @@ main(int argc, char *argv[]) {
 	}
 	isc_mem_destroy(&mctx);
 
+#if OPENSSL_VERSION_NUMBER >= 0x30200000L && OPENSSL_API_LEVEL >= 30200
+	if (oqs != NULL) {
+		OSSL_PROVIDER_unload(oqs);
+	}
+	if (default_provider != NULL) {
+		OSSL_PROVIDER_unload(default_provider);
+	}
+#endif
+
 	return (result == ISC_R_SUCCESS ? 0 : 1);
 }
